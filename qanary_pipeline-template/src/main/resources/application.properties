###############################################################################
# configuration of Qanary pipeline 
# see https://github.com/WDAqua/Qanary/wiki/Configuration-Parameters-of-a-Qanary-Pipeline
#
# this file contains reasonable default values for running the Qanary pipeline
# it is recommended NOT to update this file directly but instead create a new 
# properties file named 'application.local.properties'
# 
# the configuration properties in the file 'application.local.properties' will be 
# evaluated automatically by the Qanary pipeline.
###############################################################################

### name of your component
spring.application.name=MyQanaryPipeline

### server configuration
server.port=8080
server.host=http://localhost

### log level definitions
### change logging level in production
### a default configuration is defined here:
logging.level.*=INFO
logging.level.org.springframework.core=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework.beans=WARN
logging.level.org.springframework.boot=WARN
logging.level.org.apache.catalina.core=WARN
logging.level.org.springframework.jmx=WARN
logging.level.org.springframework.mock=WARN
logging.level.org.springframework.test=WARN
logging.level.eu.wdaqua.qanary=INFO
### advice: change the log file location
logging.file=/var/log/application.log

### from Qanary version this parameter is optional. 
### it can be used for making the access to your triplestore
### it might be useful if your triplestore is only accessible by a particular URL
### if this parameter is not defined, then Qanary is offering a proxy triplestore
# qanary.triplestore=http://admin:admin@127.0.0.1:5820/qanary

### question to a Qanary QA system will be stored on your local disk (it does not matter,
### whether they are textual or binary questions), you might choose a permanent directory 
### to ensure persistency
# example: qanary.questions.directory=/tmp/questions
qanary.questions.directory=

### if the pipeline component is providing a component by itself or is a component of a larger system,
### then the spring.boot.admin.url needs to be defined (otherwise this is an optional property)
# example: spring.boot.admin.url=http://localhost:8080

### if the Qanary pileine is not used in an interactive mode, components to be used can be predefined 
### here (by names) 
# example: qanary.components=FirstComponent,SecondComponent
qanary.components=

### define what additional (local) properties files should be used
spring.config.location=application.local.properties

### a triplestore needs to be configured to store the data of any Qanary question answering process
### since Qanary v3 you might implement your own triplestore connector as a subclass of eu.wdaqua.qanary.commons.triplestoreconnectors.QanaryTripleStoreConnector
### Stardog: if you choose to use the Stardog triplestore, then the following properties are required to create an instance of QanaryTripleStoreConnector
### see the class for additional configuration properties interpreted by Stardog
# stardog.url=http://127.0.0.1:5820/
# stardog.username=admin
# stardog.password=admin

